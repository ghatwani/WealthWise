# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pZZiHO0aCYskfSji1loskfvZEoEgy0CO
"""

from nltk.chat.util import Chat, reflections
from datetime import datetime, timedelta

# budget categories and limits
business_category_limits = {
    "inventory": 5000,
    "utilities": 1000,
    "salaries": 10000,
    "marketing": 2000,
    "supplies": 1500,
}

# Tracking dictionary for reminders, cash flow, and expense/income logs
business_data = {
    "last_expense_logged": None,
    "last_income_logged": None,
    "cash_flow": 0,
    "expenses": {category: 0 for category in business_category_limits.keys()},
}

# Set reminder periods
expense_inactivity_period = timedelta(days=3)
income_inactivity_period = timedelta(days=7)

# Function to check reminders
def check_business_reminders():
    reminders = []
    current_time = datetime.now()

    # Reminder to log income if not updated recently
    if business_data["last_income_logged"] is None or (current_time - business_data["last_income_logged"] > income_inactivity_period):
        reminders.append("It's been a while since you logged income. Keeping this updated helps track cash flow.")

    # Reminder to log expenses if not updated recently
    if business_data["last_expense_logged"] is None or (current_time - business_data["last_expense_logged"] > expense_inactivity_period):
        reminders.append("Log your recent expenses to keep track of spending across categories.")

    # Reminder if close to spending limits for any category
    for category, limit in business_category_limits.items():
        spent = business_data["expenses"].get(category, 0)
        if spent > 0.8 * limit:  # Alert if spending is over 80% of the limit
            reminders.append(f"You're nearing the budget limit for {category}. Consider reviewing these expenses.")

    # negative Cashflow
    if business_data["cash_flow"] < 0:
        reminders.append("Alert: Your cash flow is negative. Review income and expenses to maintain a positive balance.")

    return reminders

# conversation pairs
pairs = [
    [
        r"hello|hi|hey",
        ["Hello! Ready to manage your business finances?", "Hi there! Let's keep your business on track."]
    ],
    [
        r"i earned (\d+)",
        ["Great! You've recorded income of $%1.", "Income of $%1 noted. Keep up the good work!"]
    ],
    [
        r"i spent (\d+) on (.*)",
        ["Got it! You've spent $%1 on %2.", "Expense of $%1 on %2 recorded. Keep an eye on your budget!"]
    ],
    [
        r"show cash flow",
        ["Your current cash flow is $%d" % business_data["cash_flow"], "Right now, your cash flow stands at $%d." % business_data["cash_flow"]]
    ],
    [
        r"what's my highest expense?",
        ["Your highest expense is currently in the %s category, with $%d spent." % (max(business_data["expenses"], key=business_data["expenses"].get), business_data["expenses"][max(business_data["expenses"], key=business_data["expenses"].get)])]
    ],
    [
        r"how can i reduce my costs?",
        ["Evaluate your recurring expenses and see if there are cheaper alternatives.", "Consider negotiating better rates with your suppliers or switching to more cost-effective options."]
    ],
    [
        r"what should i budget for marketing?",
        ["A good rule of thumb is to allocate around 7-10% of your projected revenue for marketing.", "It depends on your business type, but generally, 5-10% of your revenue is a good target."]
    ],
    [
        r"thank you|thanks",
        ["You're welcome! Let's make budgeting easier for your business.", "Happy to help! Let's keep up the good financial habits."]
    ],
    [
        r"quit|exit",
        ["Goodbye! Remember to stay on top of your budget!", "See you later! Reach out anytime for budget help."]
    ],
]

# Initialize chatbot
chatbot = Chat(pairs, reflections)

def process_input(user_input):
    """Process user input and update business data accordingly."""
    response = chatbot.respond(user_input)

    # Log expenses
    if "i spent" in user_input.lower():
        amount = int(user_input.split(" ")[2])  # Extract amount
        category = user_input.split(" ")[-1]    # Extract category
        if category in business_data["expenses"]:
            business_data["expenses"][category] += amount
            business_data["last_expense_logged"] = datetime.now()
            business_data["cash_flow"] -= amount
            response += f"\nNoted! You've spent ${amount} on {category}."

    # Log income
    elif "i earned" in user_input.lower():
        amount = int(user_input.split(" ")[2])  # Extract amount
        business_data["last_income_logged"] = datetime.now()
        business_data["cash_flow"] += amount
        response += f"\nGreat! You've recorded income of ${amount}."

    elif user_input.lower() in ["quit", "exit"]:
        response+="Goodbye! Remember to stay on top of your budget!"
    # Check for any reminders
    reminders = check_business_reminders()
    if reminders:
        response += "\n\n**Reminders:**\n" + "\n".join(reminders)

    # Default response
    if not response:
        response = "I'm not sure I understand. Can you rephrase?"

    return response

# def chat_with_bot():
#     """Simulate an interactive chat with the bot."""
#     print("Welcome to the BudgetBot! Type 'quit' or 'exit' to end the chat.")
#     while True:
#         user_input = input("You: ")
#         if user_input.lower() in ["quit", "exit"]:
#             print("Bot: Goodbye! Remember to stay on top of your budget!")
#             break
#         response = process_input(user_input)
#         print(f"Bot: {response}")

# Start session
# chat_with_bot()

from flask import Flask, request, jsonify, session
from flask_cors import CORS  # If you plan to make cross-origin requests
import random
from flask_session import Session

app = Flask(__name__)
CORS(app)
app.secret_key = 'your_secret_key'  # Use a secure secret key in production
app.config['SESSION_TYPE'] = 'filesystem'  # Use the filesystem to store session data
Session(app)



# Endpoint to handle chat messages
@app.route("/chat", methods=["POST"])
def chat():
    data = request.json
    user_message = data.get("message", "")

    if 'chat_history' not in session:
        session['chat_history'] = []

    response = process_input(user_message)
    session['chat_history'].append({"user": user_message, "bot": response})
    session.modified=True
    print(f"Bot: {response}")
    return jsonify({"response": response})

if __name__ == "__main__":
    app.run(port=4000)



